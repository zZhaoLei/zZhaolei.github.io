<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jenkins on 俺的博客</title>
    <link>http://localhost:1313/tags/jenkins/</link>
    <description>Recent content in Jenkins on 俺的博客</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 01 Jun 2019 10:07:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/jenkins/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jenkins处理GitLab Hook</title>
      <link>http://localhost:1313/posts/jenkins%E5%A4%84%E7%90%86gitlab-hook/</link>
      <pubDate>Sat, 01 Jun 2019 10:07:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/jenkins%E5%A4%84%E7%90%86gitlab-hook/</guid>
      <description>jenkins安装Generic Webhook Trigger Plugin插件
{% asset_img Generic_Webhook_Trgger.png Generic\ Webhook\ Trgger具体配置 %}
创建任务，在构建触发器中勾选Generic Webhook Trigger, 在展开的页面中会有一个URL, 这个URL是配置Webhook使用的，一般形式是http://JENKINS_URL/generic-webhook-trigger/invoke, JENKINS_URL是初始配置jenkins时会有的，一般是http://IP:8080的形式。
如果之前有配置过GitLab webhook, 请去除这个，不然Generic Webhook Trigger不会生效。
如果Git仓库的验证使用的是用户名和密码，那么就不需要配置Token.
复制这个URL，将JENKINS_URL替换为自己的真实数据，在GitLab的对应的项目的设置--&amp;gt;集成中输入，没有安全令牌，勾选自己需要的触发器事件，SSL证书验证可以开启，也可以不开启，推荐开启。
任务设置界面还有Post content parameters, Header parameters, Request parameters, 分别是请求的post数据，header头，请求头。
一般我们只需要post的数据里的内容就够了。
图片的3，4分别是变量名（3），值（4）。值是直接从post的json格式的数据中取出来的，注意，值的获取方式是JSONPath，并且里面有点，如果json数据有多层，那么就多点几次，比如$.project.name等，可以配置多个变量组。
我们还可以Generic Webhook Trigger配置Optional filter，设置一个触发事件，比如只有当你推送的分支是develop的时候，才去构建。
在Optional filter的Expression框中输入^(refs/heads/develop)$, 在下面的Text框中输入步骤3的变量名，这里写$ref。
在shell中使用变量名的方式也是直接使用，例如echo $ref， 注意没有点。
配置完成后，保存，可以点击刚刚配置的GitLab的webhook页面的Test对应的事件测试。
GitLab的push的hook数据：
{ &amp;#34;object_kind&amp;#34;: &amp;#34;push&amp;#34;, &amp;#34;before&amp;#34;: &amp;#34;95790bf891e76fee5e1747ab589903a6a1f80f22&amp;#34;, &amp;#34;after&amp;#34;: &amp;#34;da1560886d4f094c3e6c9ef40349f7d38b5d27d7&amp;#34;, &amp;#34;ref&amp;#34;: &amp;#34;refs/heads/master&amp;#34;, &amp;#34;checkout_sha&amp;#34;: &amp;#34;da1560886d4f094c3e6c9ef40349f7d38b5d27d7&amp;#34;, &amp;#34;user_id&amp;#34;: 4, &amp;#34;user_name&amp;#34;: &amp;#34;John Smith&amp;#34;, &amp;#34;user_username&amp;#34;: &amp;#34;jsmith&amp;#34;, &amp;#34;user_email&amp;#34;: &amp;#34;john@example.com&amp;#34;, &amp;#34;user_avatar&amp;#34;: &amp;#34;https://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=8://s.gravatar.com/avatar/d4c74594d841139328695756648b6bd6?s=80&amp;#34;, &amp;#34;project_id&amp;#34;: 15, &amp;#34;project&amp;#34;:{ &amp;#34;id&amp;#34;: 15, &amp;#34;name&amp;#34;:&amp;#34;Diaspora&amp;#34;, &amp;#34;description&amp;#34;:&amp;#34;&amp;#34;, &amp;#34;web_url&amp;#34;:&amp;#34;http://example.</description>
    </item>
    <item>
      <title>Jenkins与RocketChat集成</title>
      <link>http://localhost:1313/posts/jenkins%E4%B8%8Erocketchat%E9%9B%86%E6%88%90/</link>
      <pubDate>Sat, 01 Jun 2019 10:06:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/jenkins%E4%B8%8Erocketchat%E9%9B%86%E6%88%90/</guid>
      <description>Jenkins与RocketChat集成 在Jenkins中安装插件RocketChat Notifier 配置信息 点击Jenkins左侧的系统管理--&amp;gt;系统设置, 找到Global RocketChat Notifier Settings.
配置Rocket Server URL, 是URL:PORT的类型, 例: http://chat.xxxx.com:80.
配置Login Username和Login password, 是RocketChat的账号密码.
Channel, 发送的频道.
Build Server URL, 构建的服务器和端口, http://192.168.0.1:8080
点击Test Connection, Success表示配置成功.</description>
    </item>
    <item>
      <title>Jenkins&#43;Python&#43;GitLab持续集成</title>
      <link>http://localhost:1313/posts/jenkins&#43;python&#43;gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</link>
      <pubDate>Sat, 01 Jun 2019 10:05:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/jenkins&#43;python&#43;gitlab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</guid>
      <description>创建任务 登录Jenkins，点击左侧列表的新建选项。输入任务名称，选择构建一个自由风格的软件项目，点击确定。
配置 在任务配置界面，可以设置General标签中的丢弃旧的构建选项，设置保持构建的天数和保持构建的最大个数。
点击源码管理标签，选择git，在Repository URL中输入Git仓库的链接。
如果是HTTP链接，选择Credentials一行的Add &amp;gt; Jenkins,在Kind一行下拉选择Username with password,在下方Username和Password框中输入用户名和密码。
使用docker jenkins容器里面的ssh-key。 直接使用服务器的ssh key就可以了。如果指定Path to key需要使用docker中的ssh key。如果使用Source files那么需要使用docker容器中的key, 因为Source files的相对路径不是固化到本地的路径, 而是docker中的路径.
如果是SSH链接，选择SSH Username with private key,在Username框中输入用户名，Private Key	选择为Enter directly,在显示的key框中输入私钥。（生成秘钥ssh-keygen -t rsa -C &amp;quot;email.com&amp;quot;,生成的文件在home目录下的.ssh目录下,使用命令cat id_rsa查看私钥，复制到key框中）。点击最下方的Add按钮，保存设置。
在Credentials的下拉选项中选择刚刚创建Username。
使用定时任务 在构建触发器标签里选择Poll SCM,输入H/2 * * * *, 最后点击保存。 这是一个定时任务，每隔2分钟查询一次代码，如果有更新，就执行任务。
使用webhook 使用webhook比定时任务更好，webhook只有在push或指定操作时，jenkins会拉取代码，不用定时访问，耗费资源。
需要安装的插件Gitlab Hook、GitLab、Gitlab Authentication、Build Authorization Token Root 配置job，在构建触发器中勾选Build when a change is pushed to GitLab. GitLab CI Service URL: http://服务器IP:8080/project/demo ，URL后面是回调地址，再点击高级，再Secret token行，点击Generate生成token。
在GitLab服务器上的相对应的项目的Settings里面的Integrations中，配置webhook,输入在jenkins中获取的URL,和token，可以根据需要勾选事件，开启SSL，点击Add webhook。会在Add webhook按钮下生成一个webhook，点击test,会弹出勾选的事件，选择相应的事件，会在页顶弹出Hook executed successfully: HTTP 200,到此，webhook配置完成。</description>
    </item>
    <item>
      <title>Jenkins&#43;Git子模块自动拉取代码</title>
      <link>http://localhost:1313/posts/jenkins&#43;git%E5%AD%90%E6%A8%A1%E5%9D%97%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sat, 01 Jun 2019 10:04:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/jenkins&#43;git%E5%AD%90%E6%A8%A1%E5%9D%97%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81/</guid>
      <description>jenkins+Git子模块自动拉取代码 添加Git子模块 先克隆想要添加子模块的仓库git clone ssh://git@ip:port/user/project.git，这个是主目录。
进入仓库，添加子模块git submodule add ssh://git@ip:port/user/project.git，和主仓库不同。
ls查看，会有.gitmodules和子模块的项目名。
将生成的文件和目录push到主仓库中。
克隆有子模块的仓库 添加过子模块的仓库，如果想重新克隆，和普通克隆一样，不过克隆后需要在仓库目录下执行 git submodule init和git submodule update，如果不执行，子模块中会没有文件。
更改子模块的分支 切换到子模块目录，默认子模块是master分支，git submodule foreach git checkout dev， 然后使用git submodule foreach git pull切换分支。
需要在jenkins任务的构建步骤中添加git submodule init和git submodule update，以及上述操作（写在这两个命令后面）， jenkins才能拉取到代码。
submodule可以进行tag和merge git submodule foreach可以分别对子模块进行操作, 所以对所有子模块进行tag和merge操作, 就相当于对总项目进行相应的操作.</description>
    </item>
    <item>
      <title>Jenkins Email Extension插件模板</title>
      <link>http://localhost:1313/posts/jenkins-email-extension%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Sat, 01 Jun 2019 10:03:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/jenkins-email-extension%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%9D%BF/</guid>
      <description>&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;${ENV, var=&amp;#34;JOB_NAME&amp;#34;}-第${BUILD_NUMBER}次构建日志&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body leftmargin=&amp;#34;8&amp;#34; marginwidth=&amp;#34;0&amp;#34; topmargin=&amp;#34;8&amp;#34; marginheight=&amp;#34;4&amp;#34; offset=&amp;#34;0&amp;#34;&amp;gt; &amp;lt;table width=&amp;#34;95%&amp;#34; cellpadding=&amp;#34;0&amp;#34; cellspacing=&amp;#34;0&amp;#34; style=&amp;#34;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&amp;#34;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;(本邮件由程序自动下发，请勿回复！)&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;h2&amp;gt;&amp;lt;font color=&amp;#34;#FF0000&amp;#34;&amp;gt;构建结果 - ${BUILD_STATUS}&amp;lt;/font&amp;gt;&amp;lt;/h2&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;b&amp;gt;&amp;lt;font color=&amp;#34;#0B610B&amp;#34;&amp;gt;构建信息&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;hr size=&amp;#34;2&amp;#34; width=&amp;#34;100%&amp;#34; align=&amp;#34;center&amp;#34; /&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; SVN_URL &amp;lt;td&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;项目名称：${PROJECT_NAME}&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;GIT路径：${GIT_URL}&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;构建编号：${BUILD_NUMBER}&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;GIT分支：${GIT_BRANCH}&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;触发原因：${CAUSE}&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;构建日志：&amp;lt;a href=&amp;#34;${BUILD_URL}console&amp;#34;&amp;gt;${BUILD_URL}console&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;b&amp;gt;&amp;lt;font color=&amp;#34;#0B610B&amp;#34;&amp;gt;变更信息:&amp;lt;/font&amp;gt;&amp;lt;/b&amp;gt; &amp;lt;hr size=&amp;#34;2&amp;#34; width=&amp;#34;100%&amp;#34; align=&amp;#34;center&amp;#34; /&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;上次构建成功后变化 : ${CHANGES_SINCE_LAST_SUCCESS}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;上次构建不稳定后变化 : ${CHANGES_SINCE_LAST_UNSTABLE}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;历史变更记录 : &amp;lt;a href=&amp;#34;${PROJECT_URL}changes&amp;#34;&amp;gt;${PROJECT_URL}changes&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;变更集:${JELLY_SCRIPT,template=&amp;#34;html&amp;#34;}&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;!</description>
    </item>
  </channel>
</rss>
